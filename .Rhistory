OR_CI <- exp(cbind(OR= coef(red_model), confint(red_model)))
round(OR_CI, digits = 3)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH, family= binomial, data = new_data)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
View(dat_cs)
table1(~ residence, data= dat_cs)
table1(~ as.factor(residence), data= dat_cs)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH + as.factor(residence), family= binomial, data = new_data)
summary(full_fit)
new_data <- dat_cs %>%
dplyr::select(participant_id, age, gravidity, parity, abortion, IUFD, Preterm_d, instrumental_d, C_S, ANC, mode_delivery_last, DM, PROM, PTL, APH, HDP, mode_delivery,medical_illness,number_ANC_cat, residence)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH + as.factor(residence), family= binomial, data = new_data)
## outcome
new_data <- mutate(new_data, outcome= ifelse(as.character(new_data$mode_delivery) == "5", 1, 0))
##Advanced age
new_data<-mutate(new_data, Advanced_age=ifelse(age>34,1,0))
##history of any medical illness
new_data$medical_illness<-ifelse(as.character(new_data$medical_illness)=="1", 1, 0)
##ANC visit
new_data$number_ANC_cat<-ifelse(as.character(new_data$number_ANC_cat)=="1", 1, 0)
## Abortion
new_data$abortion <-ifelse(as.character(new_data$abortion) == "1", 1, 0)
## IUFD
new_data$IUFD <-ifelse(as.character(new_data$IUFD) == "1", 1, 0)
## PRETERM
new_data$Preterm_d <-ifelse(as.character(new_data$Preterm_d) == "1", 1, 0)
## inst delivery
new_data$instrumental_d <-ifelse(as.character(new_data$instrumental_d) == "1", 1, 0)
## CS
new_data$C_S <-ifelse(as.character(new_data$C_S) == "1", 1, 0)
## ANC
new_data$ANC <-ifelse(as.character(new_data$ANC) == "2", 1, 0)
## previous mode del
new_data$mode_delivery_last <-ifelse(as.character(new_data$mode_delivery_last) == "2", 1, 0)
## PROM
new_data$PROM <-ifelse(as.character(new_data$PROM) == "1", 1, 0)
## HDP
new_data$HDP <-ifelse(as.character(new_data$HDP) == "1", 1, 0)
## Parity
new_data <- mutate(new_data, parity_cat= ifelse(parity > 4, 1,0))
#APH
new_data$APH <- ifelse(as.character(new_data$APH) == "1", 1,0)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH + as.factor(residence), family= binomial, data = new_data)
summary(full_fit)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
stepAIC(full_fit)
red_model <- full_fit <- glm(outcome~  HDP + APH + mode_delivery_last, family= binomial, data = new_data)
## ORs and CIs
OR_CI <- exp(cbind(OR= coef(red_model), confint(red_model)))
round(OR_CI, digits = 3)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH, family= binomial, data = new_data)
summary(full_fit)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ HDP + APH + mode_delivery_last, family = binomial, data = new_data)
View(full_fit)
return(pROC::auc(pROC::roc(observed, predicted)))
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$
return(pROC::auc(pROC::roc(observed, predicted)))
}
# load packages
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ HDP + APH + mode_delivery_last, family = binomial, data = new_data)
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$outcome
return(pROC::auc(pROC::roc(observed, predicted)))
}
# Step 4: Perform bootstrap resampling
boot_results <- boot(data = new_data, statistic = auc, R = 100)
# Step 5: Extract the AUC values for each bootstrap sample
boot_auc <- boot_results$t
print(boot_auc)
mean(boot_auc)
# load packages
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ HDP + APH + mode_delivery_last, family = binomial, data = new_data)
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$outcome
return(pROC::auc(pROC::roc(observed, predicted)))
}
# Step 4: Perform bootstrap resampling
boot_results <- boot(data = new_data, statistic = auc, R = 10000)
# Step 5: Extract the AUC values for each bootstrap sample
boot_auc <- boot_results$t
print(boot_auc)
mean(boot_auc)
# load packages
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ HDP + APH + mode_delivery_last, family = binomial, data = new_data)
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$outcome
return(pROC::auc(pROC::roc(observed, predicted)))
}
# Step 4: Perform bootstrap resampling
boot_results <- boot(data = new_data, statistic = auc, R = 1000)
# Step 5: Extract the AUC values for each bootstrap sample
boot_auc <- boot_results$t
print(boot_auc)
mean(boot_auc)
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
library(PredictABEL)
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration_of_the_model")
predsred = predict(red_model,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
apparent_performance <- 0.777
true_perf <- mean(boot_auc)  # mean of the bootstrap sample
over_opt_coef <- (apparent_performance - true_perf) / apparent_performance
new_data$APH_rs <- as.numeric(new_data$APH)
stepAIC(full_fit)
new_data$Risk_score<-(1*new_data$HDP_rs)+(3*new_data$mode_delivery_last_rs) + (2*new_data$APH_rs)
new_data$HDP_rs<-as.numeric(new_data$HDP)
new_data$mode_delivery_last_rs<-as.numeric(new_data$mode_delivery_last)
new_data$APH_rs <- as.numeric(new_data$APH)
new_data$Risk_score<-(1*new_data$HDP_rs)+(3*new_data$mode_delivery_last_rs) + (2*new_data$APH_rs)
cor.test(new_data$outcome,new_data$Risk_score)
risk<-glm(new_data$outcome~new_data$Risk_score,family = binomial)
predsrisk = predict(risk,type="response")
plot.roc(new_data$outcome, predsrisk,print.auc=TRUE)
risk<-glm(new_data$outcome~new_data$Risk_score,family = binomial)
predsrisk = predict(risk,type="response")
plot.roc(new_data$outcome, predsrisk,print.auc=TRUE)
table(new_data$Risk_score)
View(new_data)
length(new_data$participant_id[new_data$Risk_score=="0" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="0"])
length(new_data$participant_id[new_data$Risk_score=="1" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="1"])
length(new_data$participant_id[new_data$Risk_score=="2" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="2"]) # risk 0.15
length(new_data$participant_id[new_data$Risk_score=="3" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="3"]) # risk 0.15
length(new_data$participant_id[new_data$Risk_score=="4" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="4"]) # risk 0.15
length(new_data$participant_id[new_data$Risk_score=="5" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="5"]) # risk 0.15
library(dcurves)
library(rmda)
Dcred<-decision_curve(outcome~  HDP + APH + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
# Define the colors for each line
line.colors <- c("blue", "green","red")
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
install.packages("rms")
library(rms)
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,HDP_rs,mode_delivery_last_rs,APH_rs)
#Changing the variables to the form that we want to see in the chart
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram)
# Fit model
model.rms <- lrm(outcome ~ HDP,Last_delivery,APH, data = newdata_nomogram)
?lrm
# Fit model
model.rms <- lrm(outcome ~ HDP,Last_delivery,APH, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
model.rms
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,HDP_rs,mode_delivery_last_rs,APH_rs)
#Changing the variables to the form that we want to see in the chart
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
model.rms
table(new_data$APH_rs)
View(newdata_nomogram)
write.csv(newdata_nomogram, "nomogram.csv")
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
model.rms
# Fit model
model.rms <- lrm(outcome ~ HDP_rs,mode_delivery_last_rs,APH_rs, data = newdata_nomogram, na.action=na.delete, method="lrm.fit")
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,HDP_rs,mode_delivery_last_rs,APH_rs)
#Changing the variables to the form that we want to see in the chart
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
# Fit model
model.rms <- lrm(outcome ~ HDP + Last_delivery + APH, data = newdata_nomogram)
model.rms
# plot the nomogram
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust the margin sizes as needed
ddist <- datadist(nomogram)
options(datadist = "ddist")
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of CS among parous women"))
ddist <- datadist(nomogram)
str(nomogram)
ddist <- datadist(model.rms)
nomogram <- nomogram(model.rms)
ddist <- datadist(model.rms)
ddist <- datadist(nomogram)
nomogram <- nomogram(model.rms)
data_nomogram <- datadist(newdata_nomogram)
options(datadist = 'data_nomogram')
nomogram <- nomogram(model.rms)
ddist <- datadist(nomogram)
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of CS among parous women"))
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of CS among parous women"))
# plot the nomogram
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust the margin sizes as needed
data_nomogram <- datadist(newdata_nomogram) # define data distribution
options(datadist = 'data_nomogram')
nomogram <- nomogram(model.rms)
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of CS among parous women"))
detach("package:table1", unload = TRUE)
library(table1)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, APH, outcome)
new_data %>% mutate_at(c('Advanced_age', 'HDP', 'PROM', 'Preterm_d', 'medical_illness', 'APH', 'abortion', 'number_ANC_cat', 'IUFD', 'ANC', 'mode_delivery_last', 'parity_cat', 'APH', 'outcome'), as.factor)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, APH, outcome)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, APH, outcome)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
new_data %>% mutate_at(c('Advanced_age', 'HDP', 'PROM', 'Preterm_d', 'medical_illness', 'APH', 'abortion', 'number_ANC_cat', 'IUFD', 'ANC', 'mode_delivery_last', 'parity_cat', 'outcome'), as.factor)
new_data1 <- new_data %>%
select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
new_data1 <- new_data %>%
dplyr::select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
new_data1 <- new_data %>%
dplyr::select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
library(gtsummary)
library(tidyverse)
new_data1 <- new_data %>%
dplyr::select(participant_id, Advanced_age, HDP, PROM, Preterm_d, medical_illness, APH, abortion, number_ANC_cat, IUFD, ANC, mode_delivery_last, parity_cat, outcome)
Table_1 <- new_data1 %>%
dplyr::select(- participant_id) %>%
tbl_summary(by= outcome) %>%
add_overall()
Table_1 <- new_data1 %>%
dplyr::select(- participant_id) %>%
tbl_summary(by= outcome) %>%
add_overall()
print(Table_1)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration ofthe_model")
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
library(PredictABEL)
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration ofthe_model")
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration of the model")
predsred = predict(red_model,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
library(pROC)
predsred = predict(red_model,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
# Extract response variable 'outcome'
y <- new_data$outcome
# Select predictor variables
x <- model.matrix(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH, family= binomial, data = new_data)[,-1]
set.seed(123)  # for reproducibility
cv_fit <- cv.glmnet(x, y, family = "binomial")
?cv.glmnet
install.packages("glmnet")
library(glmnet)
cv_fit <- cv.glmnet(x, y, family = "binomial")
print(cv_fit$lambda.min)
# Predict using the fitted model
predictions <- predict(cv_fit, newx = x, s = "lambda.min", type = "response")
# Get coefficients at the lambda that gives minimum mean cross-validated error
lasso_coefficients <- coef(cv_fit, s = "lambda.min")
# Print the coefficients
print(lasso_coefficients)
library(boot)
print(over_opt_coef)
library(dcurves)
library(rmda)
Dcred<-decision_curve(outcome~  HDP + APH + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
# Define the colors for each line
line.colors <- c("blue", "green","red")
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,HDP_rs,mode_delivery_last_rs,APH_rs)
#Changing the variables to the form that we want to see in the chart
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
# Fit model
model.rms <- lrm(outcome ~ HDP + Last_delivery + APH, data = newdata_nomogram)
?lrm
library(rms)
model.rms <- lrm(outcome ~ HDP + Last_delivery + APH, data = newdata_nomogram)
model.rms
# plot the nomogram
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust the margin sizes as needed
data_nomogram <- datadist(newdata_nomogram) # define data distribution
options(datadist = 'data_nomogram')
nomogram <- nomogram(model.rms)
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of C-section"))
print(cv_fit$lambda.min)
full_fit <- glm(outcome~ Advanced_age + mode_delivery_last + HDP + APH, family= binomial, data = new_data)
summary(full_fit)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
3.17/0.3
1.03/0.3
1.03/0.3
1.66/0.3
predicted_probabilities <- predict(full_fit, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(full_fit)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration of the model")
predsred = predict(full_fit,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
# Extract response variable 'outcome'
y <- new_data$outcome
# Select predictor variables
x <- model.matrix(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH, family= binomial, data = new_data)[,-1]
set.seed(123)  # for reproducibility
library(glmnet)
cv_fit <- cv.glmnet(x, y, family = "binomial")
print(cv_fit$lambda.min)
# Predict using the fitted model
predictions <- predict(cv_fit, newx = x, s = "lambda.min", type = "response")
# Get coefficients at the lambda that gives minimum mean cross-validated error
lasso_coefficients <- coef(cv_fit, s = "lambda.min")
# Print the coefficients
print(lasso_coefficients)
predicted_probabilities <- predict(full_fit, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(full_fit)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration of the model")
predsred = predict(full_fit,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
# step 1: load packages
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ Advanced_age + HDP + APH + mode_delivery_last, family = binomial, data = new_data)
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$outcome
return(pROC::auc(pROC::roc(observed, predicted)))
}
# Step 4: Perform bootstrap re-sampling
boot_results <- boot(data = new_data, statistic = auc, R = 1000)
# Step 5: Extract the AUC values for each bootstrap sample
boot_auc <- boot_results$t
print(boot_auc)
mean(boot_auc)
apparent_performance <- 0.78
true_perf <- mean(boot_auc)  # mean of the 1000 bootstrap sample
over_opt_coef <- (apparent_performance - true_perf) / apparent_performance
print(over_opt_coef)   # 0.04 --> low chance of overoptimism (less than 0.1)
# convert to numeric
new_data$Advanced_age_rs <- as.numeric(new_data$Advanced_age)
new_data$HDP_rs<-as.numeric(new_data$HDP)
new_data$mode_delivery_last_rs<-as.numeric(new_data$mode_delivery_last)
new_data$APH_rs <- as.numeric(new_data$APH)
3.17/0.3
# calculate total risk score
new_data$Risk_score<- (1*new_data$Advanced_age_rs) + (11*new_data$mode_delivery_last_rs) + (3*new_data$HDP_rs) + (6*new_data$APH_rs)
cor.test(new_data$outcome,new_data$Risk_score)
table(new_data$Advanced_age_rs)
table(new_data$Risk_score)
View(new_data)
length(new_data$participant_id[new_data$Risk_score=="0" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="0"]) # risk 0.06
length(new_data$participant_id[new_data$Risk_score=="1" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="1"]) # risk 0.15
length(new_data$participant_id[new_data$Risk_score=="3" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="3"]) # risk 0.38
length(new_data$participant_id[new_data$Risk_score=="4" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="4"]) # risk 0.6
length(new_data$participant_id[new_data$Risk_score=="6" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="6"]) # risk 1
length(new_data$participant_id[new_data$Risk_score=="7" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="7"]) # risk
length(new_data$participant_id[new_data$Risk_score=="10" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="10"]) # risk 0.
length(new_data$participant_id[new_data$Risk_score=="11" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="11"]) # risk 0.
length(new_data$participant_id[new_data$Risk_score=="12" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="12"]) # risk 0.5
length(new_data$participant_id[new_data$Risk_score=="14" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="14"]) # risk 0.5
length(new_data$participant_id[new_data$Risk_score=="17" & new_data$outcome=="1"])/ length(new_data$participant_id[new_data$Risk_score=="17"]) # risk 0.5
risk<-glm(new_data$outcome~new_data$Risk_score,family = binomial)
predsrisk = predict(risk,type="response")
plot.roc(new_data$outcome, predsrisk,print.auc=TRUE)
Dcred<-decision_curve(outcome~  HDP + APH + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
# Define the colors for each line
line.colors <- c("blue", "green","red")
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,Advanced_age, HDP_rs,mode_delivery_last_rs,APH_rs)
##Creating new dataset
newdata_nomogram<-new_data  %>%
dplyr::select(outcome,Advanced_age_rs, HDP_rs,mode_delivery_last_rs,APH_rs)
#Changing the variables to the form that we want to see in the chart
newdata_nomogram$Age <- factor(newdata_nomogram$Advanced_age_rs, levels = c(0, 1), labels = c("<35", ">=35"))
newdata_nomogram$HDP <-factor(newdata_nomogram$HDP_rs,levels = c(0, 1), labels = c("No","Yes"))
newdata_nomogram$Last_delivery <-factor(newdata_nomogram$mode_delivery_last_rs, levels = c(0, 1), labels= c("Vaginal","Cesarean"))
newdata_nomogram$APH <- factor(newdata_nomogram$APH_rs,levels = c(0, 1), labels= c("No","Yes"))
model.rms <- lrm(outcome ~Age + Last_delivery + HDP + APH, data = newdata_nomogram)
model.rms
# plot the nomogram
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust the margin sizes as needed
data_nomogram <- datadist(newdata_nomogram) # define data distribution
options(datadist = 'data_nomogram')
nomogram <- nomogram(model.rms)
plot(nomogram(model.rms, fun = plogis, funlabel = "Risk of C-section"))
prop.table(table(new_data$outcome))
summary(full_fit)
full_fit <- glm(outcome~ Advanced_age + mode_delivery_last + HDP + APH, family= binomial, data = new_data)
summary(full_fit)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration of the model")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
Dcred<-decision_curve(outcome~  Advanced_age + HDP + APH + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
# Define the colors for each line
line.colors <- c("blue", "green","red")
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
library(glmnet)
## LASSO regression
# Extract response variable 'outcome'
y <- new_data$outcome
# Select predictor variables
x <- model.matrix(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP + APH, family= binomial, data = new_data)[,-1]
set.seed(123)  # for reproducibility
library(glmnet)
cv_fit <- cv.glmnet(x, y, family = "binomial")
print(cv_fit$lambda.min)
# Predict using the fitted model
predictions <- predict(cv_fit, newx = x, s = "lambda.min", type = "response")
# Get coefficients at the lambda that gives minimum mean cross-validated error
lasso_coefficients <- coef(cv_fit, s = "lambda.min")
# Print the coefficients
print(lasso_coefficients)
library(boot)
library(pROC)
# step 1: load packages
library(boot)
library(pROC)
# Step 2: Define your prognostic model
## Assuming you want to build a logistic regression model
model <- glm(outcome ~ Advanced_age + HDP + APH + mode_delivery_last, family = binomial, data = new_data)
# Step 3: Define a function to compute the AUC
auc <- function(new_data, indices) {
d <- new_data[indices, ]
model_fit <- glm(outcome ~ HDP + mode_delivery_last, family = binomial, data = d)
predicted <- predict(model_fit, newdata = d, type = "response")
observed <- d$outcome
return(pROC::auc(pROC::roc(observed, predicted)))
}
# Step 4: Perform bootstrap re-sampling
boot_results <- boot(data = new_data, statistic = auc, R = 1000)
# Step 5: Extract the AUC values for each bootstrap sample
boot_auc <- boot_results$t
print(boot_auc)
apparent_performance <- 0.78
true_perf <- mean(boot_auc)  # mean of the 1000 bootstrap sample
over_opt_coef <- (apparent_performance - true_perf) / apparent_performance
print(over_opt_coef)   # 0.04 --> low chance of overoptimism (less than 0.1)
mean(boot_auc)
