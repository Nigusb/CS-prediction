install.packages("meta")
library(meta)
roc_data <- metaprop(cases= pooled_sen, n= 74, control= pooled_spe)
roc_data <- metaprop(event = pooled_sen, n= 74, control= pooled_spe)
forest(roc_data)
install.packages("hsrecombi")
library(hsrecombi)
roc_data <- mada(pooled_sen, pooled_spe)
install.packages("diagmeta")
library(diagmeta)
## publication bias
funnel(roc_data, method= "deeks")
res_sen <- rma(yi= HG_last_d$Logitsen, sei = HG_last_d$SESe)
res_spe <- rma(yi= HG_last_d$Logitsep, sei = HG_last_d$SESp)
?hsroc
## forest plot
forest(roc_data)
## publication bias
funnel(roc_data, method= "deeks")
install.packages("HSROC")
https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "DBI", "foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart"))
install.packages("bamdit")
library(bamdit)
library(haven)
se <- read_dta("Downloads/se.dta")
View(se)
library(metafor)
str(se)
install.packages("diagmeta")
library(diagmeta)
sen <- se$tp/(se$tp+se$fn)
spe <- se$tn/(se$tn+se$fp)
library(mada)
senspe <- madad(se$tp, se$fp, se$tn, se$fn)
# Rename columns
names(se)[names(se) == "tp"] <- "TP"
names(se)[names(se) == "fp"] <- "FP"
names(se)[names(se) == "tn"] <- "TN"
names(se)[names(se) == "fn"] <- "FN"
# Now you can calculate pooled sensitivity and specificity
senspe <- madad(se$TP, se$FP, se$TN, se$FN)
print(colnames(se))
colSums(is.na(se))
senspe <- mada(se$tp, se$fp, se$tn, se$fn)
?madad
senspe <- madad(se$tp, se$fp, se$tn, se$fn, level = 0.95, correction = 0.5,
correction.control = "all", method = "wilson", yates = TRUE,
suppress = TRUE))
senspe <- madad(se$tp, se$fp, se$tn, se$fn, level = 0.95, correction = 0.5,
correction.control = "all", method = "wilson", yates = TRUE,
suppress = TRUE)
senspe <- madad(se$TP, se$FP, se$TN, se$FN, level = 0.95, correction = 0.5,
correction.control = "all", method = "wilson", yates = TRUE,
suppress = TRUE)
pooled_sensitivity <- sum(se$TP) / (sum(se$TP) + sum(se$FN))
pooled_specificity <- sum(se$TN) / (sum(se$TN) + sum(se$FP))
install.packages("forestplot")
library(forestplot)
table <- cbind(
c("Author", as.character(se$Author)),
c("Sensitivity", as.character(se$Sensitivity)),
c("Specificity"), as.character(se$Specificity)
)
## calculate standard error and CIs
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN))
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP))
sum(se$TP+se$FN==0)
sum((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN) < 0)
## calculate standard error and CIs
se$SE_specificity <- ifelse((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP) >= 0,
sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP)),
NA)
se$SE_specificity <- ifelse((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP) >= 0,
sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP)),
NA)
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 1
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 2
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 3
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 4
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 5
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 10
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 2
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 1
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
## Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity)) + 1
se$Sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TN + se$FP))
## Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity)) + 1
se$Sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN))
## Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity)) + 2
se$Sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity)) + 1
se$SE_specificity_positive <- sqrt((se$Specificity_positive * (1-se$Specificity_positive)) / (se$TN + se$FP))
## Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity)) + 1
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN))
# Rename columns
names(se)[names(se) == "tp"] <- "TP"
names(se)[names(se) == "fp"] <- "FP"
names(se)[names(se) == "tn"] <- "TN"
names(se)[names(se) == "fn"] <- "FN"
### Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity)) + 1
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN))
# Add a small constant to avoid division by zero
constant <- 1e-8
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
### Add constant number to change to positive
se$Sensitivity_positive <- se$Sensitivity + abs(min(se$Sensitivity))
se$Specificity_positive <- se$Specificity + abs(min(se$Specificity))
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN))
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
se$Sensitivity_positive[is.nan(se$Sensitivity_positive) | is.infinite(se$Sensitivity_positive)] <- 0
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
# Add a small constant to avoid division by zero
se$Sensitivity_positive[is.nan(se$Sensitivity_positive) | is.infinite(se$Sensitivity_positive)] <- 0
constant <- 1e-8
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
se$TP[is.nan(se$TP) | is.infinite(se$TP)] <- 0
se$FN[is.nan(se$FN) | is.infinite(se$FN)] <- 0
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP)) # has negative values
constant <- 0.001
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP + constant)) # has negative values
se$TP
se$FN
se$TN
se$TN
se$FP
zero_denominator_indices <- (se$TP + se$FN) == 0
(se$TP + se$FN) == 0
print(se$Sensitivity)
print(se$TP)
print(se$FN)
(se$TN + se$FP) == 0
constant <- 0.01
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP + constant)) # has negative values
constant <- 0.1
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP + constant)) # has negative values
constant <- 1
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP + constant)) # has negative values
constant <- 0.001
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_specificity <- sqrt((se$Specificity * (1-se$Specificity)) / (se$TN + se$FP + constant)) # has negative values
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
constant <- 1
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
constant <- 5
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
constant <- 10
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
constant <- 0.001
se$SE_sensitivity_positive <- sqrt((se$Sensitivity_positive * (1-se$Sensitivity_positive)) / (se$TP + se$FN + constant))
## calculate standard error
se$SE_sensitivity <- sqrt((se$Sensitivity * (1-se$Sensitivity)) / (se$TP + se$FN + constant)) # has negative values
se$SE_sensitivity <- ifelse(is.finite(se$SE_sensitivity), se$SE_sensitivity, 0)
se$SE_sensitivity <- ifelse(is.finite(se$SE_sensitivity), se$SE_sensitivity, 1)
deek_result <- regtest(se$Sensitivity, sei = se$SESe, model = "lm", predictor = "sei", intercept= TRUE)
print(deek_result)
plot(deek_result)
deeks_sensitivity <- regtest(se$Sensitivity, sei = se$SESe, model = "lm", predictor = "sei", intercept= TRUE)
deeks_specificity <- regtest(se$Specificity, sei = se$SESp, model = "lm", predictor = "sei", intercept= TRUE)
print(deeks_specificity)
print(deeks_sensitivity)
par(mfrow=c(2,1))
funnel(deeks_sensitivity, main="Funnel Plot for Sensitivity", xlab="Sensitivity", ylab="Standard Error")
funnel(deeks_sensitivity, main="Funnel Plot for Specificity", xlab="Specificity", ylab="Standard Error")
View(deeks_sensitivity)
funnel(deeks_sensitivity, sei = se$SESe, main="Funnel Plot for Sensitivity", xlab="Sensitivity", ylab="Standard Error")
length(deeks_sensitivity$sensitivity)
length(se$SESe)
se_vec <- rma.uni(yi= se$Sensitivity, sei = se$SESe)
funnel(se_vec, main = "Funnel Plot for Sensitivity", xlab = "Sensitivity", ylab = "Standard Error")
sp_vec <- rma.uni(yi= se$Specificity, sei = se$SESp)
funnel(se_vec, main = "Funnel Plot for Specificity", xlab = "Specificity", ylab = "Standard Error")
se_vec <- rma.uni(yi= se$Sensitivity, sei = se$SESe)
sp_vec <- rma.uni(yi= se$Specificity, sei = se$SESp)
funnel(se_vec, main = "Funnel Plot for Sensitivity", xlab = "Sensitivity", ylab = "Standard Error")
funnel(sp_vec, main = "Funnel Plot for Specificity", xlab = "Specificity", ylab = "Standard Error")
## Calculate ESS
se$ESS <- 1/sqrt(se$logor)
# calculate diagnostic OR
se$DOR <- (se$TP / se$FN) / (se$FP / se$TN)
metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger")
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger")
print(deek_plot)
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger", k.min = 4)
print(deek_plot)
plot <- rma.uni(yi= se$DOR, sei = 1/sqrt(se$ESS), method = "DL")
plot2 <- funnel(plot, method= "deeks", confint= TRUE)
print(plot2)
?funnel
funnel(deek_plot)
funnel(deek_plot, yi= se$DOR, sei = 1/sqrt(se$ESS)
funnel(deek_plot, yi= se$DOR, sei = 1/sqrt(se$ESS)
print(deek_plot)
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "deeks", k.min = 4)
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger", k.min = 4)
print(deek_plot)
funnel(plot2, main = "", xlab = "Diagnostic Odds Ratio", ylab = " 1/root(ESS)")
funnel(plot, main = "", xlab = "Diagnostic Odds Ratio", ylab = " 1/root(ESS)")
funnel(plot, main = "", xlab = "Diagnostic Odds Ratio", ylab = " 1/root(ESS)")
print(deek_plot)
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger", k.min = 4)
library(meta)
library(metafor)
deek_plot <- metabias(x = se$DOR, seTE = 1/sqrt(se$ESS), method.bias = "Egger", k.min = 4)
print(deek_plot)
knitr::opts_chunk$set(echo = TRUE)
library("RMySQL")
install.packages("RMySQL")
library("RMySQL")
con <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1_ctmr_epi.ki.se")
con <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWlO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
library(RMySQL)
knitr::opts_chunk$set(echo = TRUE)
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
install.packages("docopt")
library(docopt)
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWIO",
dbname = "042_pcos_romina",
port= 22,
host = "c1-ctmr-epi.ki.se")
library(RMySQL)
knitr::opts_chunk$set(echo = TRUE)
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWlO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWlO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
library(RMySQL)
knitr::opts_chunk$set(echo = TRUE)
con_dat <- dbConnect(MySQL(),
user = "nigus",
password = "SDacLacToWlO",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se")
knitr::opts_chunk$set(echo = TRUE)
con_dat <- dbConnect(Postgres(),
user = "nigus",
password = "SdacLacToWlo",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se", port= 22)
con_dat <- dbConnect(Postgres(),
user = "nigus",
password = "SdacLacToWlo",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se", port= 22)
library(DBI)
con_dat <- dbConnect(Postgres(),
user = "nigus",
password = "SdacLacToWlo",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se", port= 22)
library(RMySQL)
library(RPostgres)
con_dat <- dbConnect(Postgres(),
user = "nigus",
password = "SdacLacToWlo",
dbname = "042_pcos_romina",
host = "c1-ctmr-epi.ki.se", port= 22)
library(PredictABEL)
library(PredictABEL)
library(MASS)
library(pROC)
library(boot)
library(tidyverse)
library(table1)
library(haven)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP, family= binomial, data = new_data)
setwd("C:/Users/User/Desktop/Nigus")
library(haven)
dat_cs <- read_sav("thesis_data_NB.sav")
new_data <- dat_cs %>%
dplyr::select(participant_id, age, gravidity, parity, abortion, IUFD, Preterm_d, instrumental_d, C_S, ANC, mode_delivery_last, DM, PROM, PTL, APH, HDP, mode_delivery,medical_illness,number_ANC_cat)
## outcome
new_data <- mutate(new_data, outcome= ifelse(as.character(new_data$mode_delivery) == "5", 1, 0))
##Advanced age
new_data<-mutate(new_data, Advanced_age=ifelse(age>34,1,0))
##history of any medical illness
new_data$medical_illness<-ifelse(as.character(new_data$medical_illness)=="1", 1, 0)
##ANC visit
new_data$number_ANC_cat<-ifelse(as.character(new_data$number_ANC_cat)=="1", 1, 0)
## Abortion
new_data$abortion <-ifelse(as.character(new_data$abortion) == "1", 1, 0)
## IUFD
new_data$IUFD <-ifelse(as.character(new_data$IUFD) == "1", 1, 0)
## PRETERM
new_data$Preterm_d <-ifelse(as.character(new_data$Preterm_d) == "1", 1, 0)
## inst delivery
new_data$instrumental_d <-ifelse(as.character(new_data$instrumental_d) == "1", 1, 0)
## CS
new_data$C_S <-ifelse(as.character(new_data$C_S) == "1", 1, 0)
## ANC
new_data$ANC <-ifelse(as.character(new_data$ANC) == "2", 1, 0)
## previous mode del
new_data$mode_delivery_last <-ifelse(as.character(new_data$mode_delivery_last) == "2", 1, 0)
## PROM
new_data$PROM <-ifelse(as.character(new_data$PROM) == "1", 1, 0)
## HDP
new_data$HDP <-ifelse(as.character(new_data$HDP) == "1", 1, 0)
## Parity
new_data <- mutate(new_data, parity_cat= ifelse(parity > 4, 1,0))
table1(~ as.factor(Advanced_age) + as.factor(medical_illness) + as.factor(number_ANC_cat) + as.factor(abortion) + as.factor(IUFD) + as.factor(Preterm_d) + as.factor(C_S) + as.factor(ANC) + as.factor(mode_delivery_last) + as.factor(PROM) + as.factor(HDP) + as.factor(parity_cat) | as.factor(outcome), data= new_data)
full_fit <- glm(outcome~ Advanced_age + abortion + parity_cat + mode_delivery_last + number_ANC_cat + medical_illness + HDP, family= binomial, data = new_data)
summary(full_fit)
## model reduction
stepAIC(full_fit)
## OR for full model
OR_full <- exp(cbind(OR= coef(full_fit), confint(full_fit)))
round(OR_full, digits = 3)
red_model <- full_fit <- glm(outcome~  HDP + mode_delivery_last, family= binomial, data = new_data)
## ORs and CIs
OR_CI <- exp(cbind(OR= coef(red_model), confint(red_model)))
round(OR_CI, digits = 3)
predicted_probabilities <- predict(red_model, type = "response")
calibration_data <- data.frame(Outcome = new_data$outcome, Predicted_Risks = predicted_probabilities)
predRisk <- predRisk(red_model)
plotCalibration(calibration_data, 1, predRisk, 10,plottitle = "Calibration_of_the_model")
predsred = predict(red_model,type="response")
plot.roc(new_data$outcome, predsred,print.auc=TRUE)
new_data$HDP_rs<-as.numeric(new_data$HDP)
new_data$mode_delivery_last_rs<-as.numeric(new_data$mode_delivery_last)
new_data$Risk_score<-(1*new_data$HDP_rs)+(3*new_data$mode_delivery_last_rs)
cor.test(new_data$outcome,new_data$Risk_score)
table(new_data$Risk_score)
risk<-glm(new_data$outcome~new_data$Risk_score,family = binomial)
predsrisk = predict(risk,type="response")
plot.roc(new_data$outcome, predsrisk,print.auc=TRUE)
install.packages("dcurves")
install.packages("rmda")
Dcred<-decision_curve(outcome~  HDP + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
library(dcurves)
library(rmda)
Dcred<-decision_curve(outcome~  HDP + mode_delivery_last, family= binomial, data = new_data,thresholds = seq(0, 1, by = .01),confidence.intervals = 0.95)
# Define the colors for each line
line.colors <- c("blue", "green","red")
plot_decision_curve(x=Dcred, curve.names=c("Model", "Intervention for all", "Intervention for none"), cost.benefit.axis = TRUE,col = line.colors)
table1(~ Preterm_d + PROM + HDP, data = new_data)
table1(~ as.factor(Preterm_d) + as.factor(PROM) + as.factor(HDP), data = new_data)
View(dat_cs)
table1(~ as.factor(NICU) + as.factor(resuscitat) + as.factor(cong_malf) + as.factor(meconium) + as.factor(dead_afterdelivery) + as.factor(stillborn) + apgar + weight, data = new_data)
table1(~ as.factor(NICU) + as.factor(resuscitat) + as.factor(cong_malf) + as.factor(meconium) + as.factor(dead_afterdelivery) + as.factor(stillborn) + apgar + weight, data = dat_cs)
table1(new_data$mode_delivery)
table(new_data$mode_delivery)
View(new_data)
dat_cs <- read_sav("thesis_data_NB.sav")
View(dat_cs)
dat_cs <- dat_cs[-310, ]
new_data <- dat_cs %>%
dplyr::select(participant_id, age, gravidity, parity, abortion, IUFD, Preterm_d, instrumental_d, C_S, ANC, mode_delivery_last, DM, PROM, PTL, APH, HDP, mode_delivery,medical_illness,number_ANC_cat)
## outcome
new_data <- mutate(new_data, outcome= ifelse(as.character(new_data$mode_delivery) == "5", 1, 0))
##Advanced age
new_data<-mutate(new_data, Advanced_age=ifelse(age>34,1,0))
##history of any medical illness
new_data$medical_illness<-ifelse(as.character(new_data$medical_illness)=="1", 1, 0)
##ANC visit
new_data$number_ANC_cat<-ifelse(as.character(new_data$number_ANC_cat)=="1", 1, 0)
## Abortion
new_data$abortion <-ifelse(as.character(new_data$abortion) == "1", 1, 0)
## IUFD
new_data$IUFD <-ifelse(as.character(new_data$IUFD) == "1", 1, 0)
## PRETERM
new_data$Preterm_d <-ifelse(as.character(new_data$Preterm_d) == "1", 1, 0)
## inst delivery
new_data$instrumental_d <-ifelse(as.character(new_data$instrumental_d) == "1", 1, 0)
## CS
new_data$C_S <-ifelse(as.character(new_data$C_S) == "1", 1, 0)
## ANC
new_data$ANC <-ifelse(as.character(new_data$ANC) == "2", 1, 0)
## previous mode del
new_data$mode_delivery_last <-ifelse(as.character(new_data$mode_delivery_last) == "2", 1, 0)
## PROM
new_data$PROM <-ifelse(as.character(new_data$PROM) == "1", 1, 0)
## HDP
new_data$HDP <-ifelse(as.character(new_data$HDP) == "1", 1, 0)
## Parity
new_data <- mutate(new_data, parity_cat= ifelse(parity > 4, 1,0))
table1(~ as.factor(Advanced_age) + as.factor(medical_illness) + as.factor(number_ANC_cat) + as.factor(abortion) + as.factor(IUFD) + as.factor(Preterm_d) + as.factor(C_S) + as.factor(ANC) + as.factor(mode_delivery_last) + as.factor(PROM) + as.factor(HDP) + as.factor(parity_cat) | as.factor(outcome), data= new_data)
library(gtsummary)
Table_1 <- new_data %>%
dplyr::select(participant_id) %>%
tbl_summary(by= outcome) %>%
add_overall() %>%
as_flex_table()
Table_1 <- new_data %>%
dplyr::select(-participant_id) %>%
tbl_summary(by= outcome) %>%
add_overall() %>%
as_flex_table()
